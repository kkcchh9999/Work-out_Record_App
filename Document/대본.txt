1 안녕하세요 A team 의 발표자 권철현입니다.
저는 WOR 운동일지를 개발했습니다. 
말 그대로 운동 일지를 기록하는 애플리케이션입니다. 

2 목차 설명 드리겠습니다. 
이 앱을 개발한 이유와 목표대상을 설명 드리고
이후에 앱에 포함된 기능을 소개 드리겠습니다.
후에 핵심 부분에 대한 소스코드만 추려서 발표 드리고
제가 생각하기에 개선 가능한 부분을 발표한 후에 QnA를 끝으로 발표 마무리하도록 하겠습니다. 

3 그럼 먼저 개발 이유입니다.

4 운동, 그 중에서도 웨이트트레이닝 흔히 보디빌딩이라고 이야기들을 하는 종목은
말 그대로 몸에 근육을 쌓는것입니다. 근육을 키우고 가꾸는게 목적이죠. 
여기서 근육이 크는 원리는 점진적 과부하입니다. 

5 아래 그림을 보면 작은 역기를 들고 있는 사람이 몸이 커지면서 점점 더 큰 역기를 들고 있습니다. 
이는 몸이 커져서 무거운 역기를 들 수 있는 것도 맞지만, 반대로 더 큰 역기를 들수록 
몸이 커지는 것입니다. 몸이 자극을 받으면 그에 맞춰 성장하는데 
점점 더 강한 자극이 올수록 점점 몸이 성장하는게 점진적 과부하입니다. 

6 이 원리에 따라서 근육이 성장하기 위해서는 점점 더 강한 훈련이 필요합니다. 
그러려면 이전의 훈련 강도를 기억하고 있어야 더 강한 훈련을 할수 있죠.
그 방법에 운동 일지 작성은 매우 효과적입니다. 이 일지를 작성하는데에 
도움이 되기 위해서 어플리케이션을 개발했습니다.

7 즉 운동, 웨이트트레이닝에 관심이 있는 사람들이 어플리케이션의
목표 대상이고,  이들이 효과적인 운동을 할 수 있도록 하는것이 이 앱의 개발 이유입니다.


8 그럼 기능을 소개하도록 하겠습니다. 
 
9 오른쪽에 사진이 제가 작성하던 운동 일지입니다. 악필이라 좀 보기가 힘드네요 
절대적인건 아니지만, 보통 운동일지에 포함되어야 하는 것들은 운동 부위, 운동 날짜,
운동 루틴, 반복횟수 정도입니다. 

10 이들을 포함하는 일지를 작성하는 기능이 첫번째 기능입니다. 
첫 번째 사진이 일지를 작성하는 화면입니다. 시간은 자동적으로 일지를 추가하는 
현재시각을 받아오도록 구성했습니다. 
두 번째 사진은 저장한 일지들을 모아서 볼 수 있는 화면입니다. 앱을 실행했을 때 
가장 먼저 나타나는 메인 화면이기도 합니다. 
이 일지들을 달력에서 확인할 수 있도록 한 기능이 세번째 화면입니다.
일지를 작성한 날짜에는 체크표시를 나타나게 했습니다.
이외에도 일지를 검색하거나, 일지를 구성하는 루틴을 저장, 불러오기 기능 등이 있습니다. 
간단하게 영상으로 살펴보시는게 편하실 것 같아서 영상 짧게 준비했습니다.

11 먼저 검색기능입니다. 운동 부위를 검색해서 결과를 볼 수 있습니다. 
다음은 루틴 저장, 불러오기 입니다. 새 메모를 작성할 때 불러올 수도 있고, 
빈 일지로 시작해서 루틴을 불러올 수 도 있습니다. 이때 반복횟수는 불러오지않습니다.
일지 삭제 또한 가능합니다. 개별 삭제, 여러개 삭제가 가능합니다.
이외에 캘린더에서 일지가 작성된 날짜를 누르면 어떤 부위의 운동을 했는지 알 수 있습니다. 
여기까지가 앱이 가진 기능들입니다.

12 다음으로 소스코드를 설명 드리겠습니다. 소스코드의 모든 내용을 설명하기에는
시간이 모자라서 아무래도 일지를 작성, 저장하는데 초점이 맞춰진 어플리케이션이다 보니
저장 관련된 부분을 중심으로 준비했습니다.

13 설명드릴 부분의 목차입니다. 먼저 데이터베이스, 
일지 저장, 삭제, 검색, 보여주기 이런 일들을 하려면 데이터베이스가 필요해서 
만들었습니다. 
뷰모델은 앱이 켜지면 임시 저장소 같은 느낌으로 동작하는데, 화면이 바뀌는 부분마다
계속 데이터베이스를 생성하지 않기 위해서 뷰모델을 사용했습니다. 
공유 프리퍼런스는 루틴 저장을 위해 사용한 부분입니다. 
아무래도 앱의 메인 기능이 일지 저장이기 때문에, 저장 관련 부분만 추렸습니다.
디자인이나, 화면전환 등의 요소는 앞서 제출한 소스코드에 포함되어 있습니다. 

14 먼저 데이터베이스입니다. Room은 SQLite에 대한 추상화 레이어를 제공하여
 원활한 데이터베이스 액세스를 지원합니다. 안드로이드 개발자 문서에서도
SQLite를 직접 사용하는 것 보다 권장하는 방식입니다. 
엔티티를 사용해서 작동하고, @Database 에노테이션으로 데이터베이스를 선언하고,
조건으로는 @DAO 에노테이션을 포함한 클래스를 반환하는 추상 메소드가 있어야합니다.
DAO는 잠시 뒤에 설명하고, DB에노테이션 아래에 타입컨버터는 
SQLite 에서의 자료형과 코틀린 코드의 자료형이 같지 않아서 이를 변환해주는 컨버터입니다.
아래 엔티티는 데이터베이스의 엔티티로 사용하는 클래스이자 데이터클래스로
일지 작성에 필요한 정보들을 가지고있습니다. 이 중에 날짜, UUID 가 
SQLite에 없는 자료형임으로, 아까 이야기한 타입컨버터에서 처리를 해줍니다. 

15 아까 이야기한 DAO 입니다. Database Access Object 로 데이터베이스에 엑세스하는데
사용되는 메소드들이 포함되어 있습니다. get, search 등은 쿼리를 작성해줘야 하지만,
update, add, delete 등은 쿼리를 작성하지 않아도 작동합니다. 

16 이번엔 Repository 입니다. 구글 앱 아키텍처 지침에서 권장하는 레포지토리 패턴을 위해서 
사용합니다. 리포지터리 클래스는 데이터베이스를 구현하고, 데이터를 액세스하는 과정을
캡슐화하고, 데이터를 가져오고, 저장하는 방법 등을 구현합니다. UI 코드에서는 리포지터리에 
데이터를 요청합니다. 

17 이 repository 클래스에는 싱글톤으로 작동합니다. 즉, 앱이 실행 중일 때에 단 한번만 
인스턴스가 생성된다는 뜻입니다. 따라서 앱이 최초 실행 될 때 init 함수로 repository 를 생성하고,
이후에 접근할때는 get 함수를 사용해서 접근하도록 동반 객체를 선언했습니다.
이 init 함수는 Application을 상속한 서브 클래스를 생성해서 Application.onCreate() 에서 
사용했습니다.  

18 다음으로 뷰모델입니다. 뷰모델을 통해서 데이터를 저장하고 전달하면
화면 회전의 상황에도 데이터베이스 검색 쿼리를 매번 다시 동작 할 필요가 없기 때문에
뷰모델을 통해서 사용했습니다.  viewmodel은 레파지토리에서 데이터를 가져와 저장,
ui 클래스에서는 viewmodle 에 접근하여 데이터를 가져오는 방식입니다.  
이 같은 뷰 모델은 하나 더 있는데, 지금 보여드리는 뷰모델은 일지 목록을 보여줄 때 
사용하는 정보들을 위한 뷰모델이고, 다른 뷰 모델은 일지를 작성하는 화면에서 
사용하는 뷰모델입니다. 비슷한 구조로 이루어 져 있어 따로 소스코드를 가져오지는
않았습니다. 

19 마지막으로 공유 프리퍼런스입니다. 간단한 데이터 보존을 위해 사용하는 
기능입니다. 키와 데이터 값을 쌍으로 저장합니다. 이 또한 싱글톤이기 때문에
class가 아니라 object 로 선언했습니다. 이 기능을 사용해서 
일지의 루틴 저장, 불러오기를 구현했습니다. 아래 보이는 부분은
뷰모델의 일부분입니다. 

20 개선 방안입니다. 앱을 개발하면서 개선하고 싶은, 개선의 여지가 있는 부분을 
말씀 드리려고 합니다. 평가항목에 유지보수성, 발전성 부분이 있어서 발표 내용에 
넣었습니다. 

21 먼저, 공유 프리퍼런스 부분입니다. 코드의 캡처본인데, 취소선이 그어져있습니다.
이는 안드로이드에서 deprecate 되었다는 의미로, 더이상 지원하지 않는다는 것입니다.
아직 사용하는데 문제는 없지만 버전이 달라짐에 따라 언제 문제가 생길지 모른다는 
위험을 안고있기 때문에, 데이터베이스로 바꾸는 방식으로 개선할 수 있습니다.
하지만, 제가 데이터베이스 설계를 하는 부분에 있어서 미숙하여, 이를 개선하지는 못했습니다.

22 다음으로는 일지 기록 화면입니다. 왼편이 지금 현재 입력 화면입니다.
지인들에게 앱의 완성본을 사용해보고 불편한 점이 있다면 알려달라고 테스트를 해 봤는데
입력 방식이 메모장과 다를 바 없다 라고 하는 의견을 제시해서, 
우측 방식처럼 spinner 를 통해서 운동 종목과 중량, 횟수를 선택할 수 있도록 하는 
방법처럼 개선하려고 했습니다. 기존의 방식과 새로운 방식 둘 중 선택해서 사용할 수 있도록
하는 방법을 생각했지만, 개발 시간이 부족하여 진행하지는 못했습니다.

